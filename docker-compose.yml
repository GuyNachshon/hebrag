# Docker Compose for Hebrew Agentic RAG System
version: '3.8'

services:
  hebrew-rag-agno:
    build: 
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: hebrew-rag-system
    ports:
      - "8000:8000"    # FastAPI
      - "11434:11434"  # Ollama
    volumes:
      - ./models:/app/models:ro
      - ./chroma_db:/app/chroma_db
      - ./documents:/app/documents
      - ./logs:/app/logs
      - ./config:/app/config:ro
    environment:
      - HEBREW_RAG_ENV=production
      - AGNO_TELEMETRY=false
      - OLLAMA_HOST=0.0.0.0:11434
      - TRANSFORMERS_OFFLINE=1
      - HF_DATASETS_OFFLINE=1
      - USE_GPU=true
      - PYTHONPATH=/app
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - hebrew-rag-network

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: hebrew-rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - hebrew-rag-network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hebrew-rag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - hebrew-rag-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: hebrew-rag-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - hebrew-rag-network

volumes:
  chroma_db:
    driver: local
  models:
    driver: local
  documents:
    driver: local
  logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  hebrew-rag-network:
    driver: bridge